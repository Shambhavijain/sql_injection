<h1>🗳️ Vulnerable Voting App — SQL Injection Demonstration</h1>

<h2>❗ Purpose</h2>
<p>
This project demonstrates how a simple voting application built with Python (Flask) can be vulnerable to 
<strong>SQL Injection attacks</strong> when user inputs are not properly sanitized or validated.
The goal is to raise awareness about common web security flaws and emphasize the importance of 
<strong>input validation</strong> and <strong>safe coding practices</strong>.
</p>

<hr>

<h2>👤 Created By</h2>
<p>
<strong>Shambhavi Jain</strong><br>
This is the first project under <strong>WatchGuard</strong>, a company I founded to explore and showcase cybersecurity vulnerabilities 
in web applications.<br>
This demonstration highlights the real-world risks of insecure coding practices by simulating a vulnerable voting system.
</p>

<hr>

<h2>🖼️ Architecture Overview</h2>
<p>This is a deliberately insecure system that:</p>
<ul>
  <li>Accepts vote form input and places it directly into unsafe SQL queries.</li>
  <li>Allows attackers to manipulate queries, alter database records, and even bypass authentication.</li>
  <li>Lacks proper validation and uses raw string-based SQL queries.</li>
</ul>

<hr>

<h2>🧰 Technologies Used</h2>

<table>
  <tr>
    <th>Technology</th>
    <th>Purpose</th>
  </tr>
  <tr>
    <td>Python 3.x</td>
    <td>Core programming language</td>
  </tr>
  <tr>
    <td>Flask</td>
    <td>Web framework used to build the app</td>
  </tr>
  <tr>
    <td>SQLite3</td>
    <td>Lightweight relational database</td>
  </tr>
  <tr>
    <td>HTML</td>
    <td>Frontend templating for rendering forms/pages</td>
  </tr>
</table>

<hr>

<h2>📁 Project Structure</h2>

<pre>
vulnerable_voting_app/
├── app.py                # Main Flask app (vulnerable)
├── init_db.py            # Initializes the database and inserts candidates
├── templates/
│   ├── vote.html         # Voting form template
│   └── results.html      # Results view template
├── vulnerable_voting_app.jpg  # Optional architecture image
└── README.md             # Project documentation
</pre>

<hr>

<h2>⚙️ Setup Instructions</h2>

<p><strong>Requirements:</strong> Python 3.x</p>

<ol>
  <li>Clone the repository:
    <pre><code>git clone https://github.com/yourusername/voting-app.git
cd voting-app</code></pre>
  </li>

  <li>Install Flask:
    <pre><code>pip install flask</code></pre>
  </li>

  <li>Initialize the database:
    <pre><code>python init_db.py</code></pre>
  </li>

  <li>Run the application:
    <pre><code>python app.py</code></pre>
  </li>

  <li>Visit in your browser:
    <pre><code>http://127.0.0.1:5000</code></pre>
  </li>
</ol>

<hr>

<h2>🧪 SQL Injection Demonstration</h2>

<h3>🗳️ Vote Form Injection</h3>
<p>Try submitting this as <code>Candidate ID</code>:</p>

<pre><code>1', 1); UPDATE votes SET vote_count = 999 WHERE candidate_id = '1'; --</code></pre>

<p>✅ This injects SQL that changes the vote count to 999 for candidate ID 1.</p>

<h3>🔓 Result Page Injection / Login Bypass</h3>
<p>Submit this as a search or login input:</p>

<pre><code>' OR '1'='1</code></pre>

<p>✅ This always returns true, bypassing filters or login authentication.</p>

<hr>

<h2>🧱 What's Vulnerable?</h2>

<ul>
  <li>SQL queries built with string concatenation or f-strings</li>
  <li>No use of parameterized queries</li>
  <li>Lack of input validation or sanitization</li>
  <li>Use of <code>executescript()</code> allowing stacked queries</li>
  <li>No secure user authentication (in login scenarios)</li>
</ul>

<hr>

<h2>🔒 Security Risks Explained</h2>

<p>This app demonstrates risks like:</p>

<ul>
  <li>✅ Data tampering (e.g., altering vote counts)</li>
  <li>✅ Data leakage (e.g., viewing unauthorized votes)</li>
  <li>✅ Authentication bypass (e.g., using <code>' OR '1'='1</code>)</li>
  <li>✅ Denial of service or privilege escalation via SQL payloads</li>
</ul>

<hr>

<h2>✅ How to Fix (Secure Coding Practices)</h2>

<ul>
  <li>Use parameterized queries:
    <pre><code>cursor.execute("SELECT * FROM votes WHERE candidate_id = ?", (candidate_id,))</code></pre>
  </li>
  <li>Sanitize and validate all user inputs</li>
  <li>Avoid <code>executescript()</code> on untrusted input</li>
  <li>Handle errors gracefully (no stack traces exposed)</li>
  <li>Use proper input length limits, types, and regex validation</li>
</ul>

<hr>

<h2>🔮 Future Improvements</h2>

<ul>
  <li>🔐 Implement secure authentication with password hashing (e.g., bcrypt)</li>
  <li>👥 Add role-based access control (RBAC)</li>
  <li>🧼 Sanitize all user inputs using libraries</li>
  <li>🛡️ Add CSRF protection for forms</li>
  <li>🔐 Use HTTPS for secure data transport</li>
  <li>📊 Add logging and monitoring for suspicious activity</li>
</ul>
