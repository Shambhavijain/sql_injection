Vulnerable Voting App — SQL Injection Demonstration
❗Purpose
This project demonstrates how a simple voting application built with
Python (Flask) can be vulnerable to SQL Injection attacks when user inputs are not properly sanitized or validated.
The goal is to raise awareness about common web security flaws and emphasize the importance of input validation .

👤 Created By: Shambhavi Jain
This is the first project under WatchGuard, a company I founded to explore and showcase cybersecurity vulnerabilities in web applications.
 This demonstration project highlights the real-world risks of insecure coding practices by simulating a vulnerable voting system.

🖼️ Architecture Overview
Below is the vulnerable architecture of the application:

Vote form input goes directly into unsafe SQL queries.

Attackers can manipulate the query, alter data, or bypass authentication.



🧰 Technologies Used
Technology	   Purpose
Python 3.x	   Core programming language
Flask	       Web framework used to build the app
SQLite3    	   Lightweight relational database
HTML           Templating engine for rendering pages

📁 Project Structure
vulnerable_voting_app/
│
├── app.py            
├── init_db.py        
├── templates/
│   └── vote.html      
    └──results.html
├── vulnerable_voting_app.jpg  
└── README.md          


⚙️ Setup Instructions
Requirements: Python 3.x

1.Clone or download the repo:
git clone https://github.com/yourusername/voting-app.git
cd voting-app


2.Install Flask if not already installed:

pip install flask


3.Initialize the database:

python init_db.py


4.Start the app:

python app.py
Open your browser and go to:

http://127.0.0.1:5000

🧪 SQL Injection Demo
Try submitting this as input in the voting form:

Candidate_id:
1', 1); UPDATE votes SET vote_count = 999 WHERE candidate_id = '1'; --

✅ This injects a malicious SQL command that sets the vote count to 999 for candidate ID 1.


Try submitting this as input in the result page:

🔓 Authentication Bypass Example
On a login or result page (if implemented), try this as username or query parameter:

' OR '1'='1
✅ This bypasses basic authentication or filters using always-true logic.

🧱 What's Vulnerable?
SQL queries built using string concatenation or f-strings.

No use of parameterized queries.

Lack of input sanitization and validation.

Direct execution of raw user input.



✅ How to Fix(Prevention):
While this project shows how things can go wrong, here are best practices for securing it:

Use parameterized queries (e.g., cursor.execute("SELECT * FROM ... WHERE id = ?", (id,)))

Sanitize and validate all user inputs